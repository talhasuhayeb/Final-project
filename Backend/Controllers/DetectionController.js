const UserModel = require("../Models/User");

// Get all detection records for a user
const getDetectionHistory = async (req, res) => {
  try {
    const userId = req.user.id;
    console.log("Fetching history for user ID:", userId);

    const user = await UserModel.findById(userId);

    if (!user) {
      console.log("User not found with ID:", userId);
      return res.status(404).json({
        message: "User not found",
        success: false,
      });
    }

    console.log("User found:", user.name);
    console.log("Detection history array exists:", !!user.detectionHistory);
    console.log(
      "Detection history length:",
      user.detectionHistory ? user.detectionHistory.length : 0
    );

    if (!user.detectionHistory || user.detectionHistory.length === 0) {
      console.log("No detection history found for user");
      return res.json([]);
    }

    // Sort history by timestamp, most recent first
    const sortedHistory = [...user.detectionHistory].sort(
      (a, b) => new Date(b.timestamp) - new Date(a.timestamp)
    );

    console.log("Returning sorted history with length:", sortedHistory.length);
    res.json(sortedHistory);
  } catch (err) {
    console.error("Error retrieving detection history:", err);
    res.status(500).json({
      message: "Error retrieving detection history",
      success: false,
    });
  }
};

// Get a specific detection record
const getDetectionById = async (req, res) => {
  try {
    const userId = req.user.id;
    const detectionId = req.params.detectionId;

    const user = await UserModel.findById(userId);

    if (!user) {
      return res.status(404).json({
        message: "User not found",
        success: false,
      });
    }

    // Find the specific detection
    const detection = user.detectionHistory.id(detectionId);

    if (!detection) {
      return res.status(404).json({
        message: "Detection record not found",
        success: false,
      });
    }

    res.json({
      detection,
      success: true,
    });
  } catch (err) {
    console.error("Error retrieving detection record:", err);
    res.status(500).json({
      message: "Error retrieving detection record",
      success: false,
    });
  }
};

// Generate a downloadable report for a detection
const generateDetectionReport = async (req, res) => {
  try {
    const userId = req.user.id;
    const detectionId = req.params.detectionId;

    const user = await UserModel.findById(userId);

    if (!user) {
      return res.status(404).json({
        message: "User not found",
        success: false,
      });
    }

    // Find the specific detection
    const detection = user.detectionHistory.id(detectionId);

    if (!detection) {
      return res.status(404).json({
        message: "Detection record not found",
        success: false,
      });
    }

    // Create the report content
    const report = `
BLOOD GROUP DETECTION REPORT
===========================

User: ${user.name}
Email: ${user.email}
Date: ${new Date(detection.timestamp).toLocaleString()}

RESULTS
===========================
Blood Group: ${detection.bloodGroup}
Confidence: ${detection.confidence}%
Image Quality: ${detection.imageQuality}/100
Processing Time: ${detection.processingTime} ms

This report was generated by Bindu AI Blood Detection System
Report ID: ${detection._id}
    `;

    // Set headers to trigger file download
    res.setHeader("Content-Type", "text/plain");
    res.setHeader(
      "Content-Disposition",
      `attachment; filename="blood-report-${detection._id}.txt"`
    );

    res.send(report);
  } catch (err) {
    console.error("Error generating detection report:", err);
    res.status(500).json({
      message: "Error generating detection report",
      success: false,
    });
  }
};

// Save a new detection record
const saveDetection = async (req, res) => {
  try {
    const userId = req.user.id;
    const {
      bloodGroup,
      confidence,
      processingTime,
      imageQuality,
      filename,
      timestamp,
    } = req.body;

    const user = await UserModel.findById(userId);

    if (!user) {
      return res.status(404).json({
        message: "User not found",
        success: false,
      });
    }

    // Add to detection history
    user.detectionHistory.push({
      bloodGroup,
      confidence,
      processingTime,
      imageQuality,
      filename,
      timestamp: new Date(timestamp),
    });

    // Update most recent blood type
    user.bloodType = bloodGroup;

    await user.save();

    res.json({
      message: "Detection record saved successfully",
      success: true,
    });
  } catch (err) {
    console.error("Error saving detection record:", err);
    res.status(500).json({
      message: "Error saving detection record",
      success: false,
    });
  }
};

module.exports = {
  getDetectionHistory,
  getDetectionById,
  generateDetectionReport,
  saveDetection,
};
